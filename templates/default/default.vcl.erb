#
# This is an example VCL file for Varnish.
#
# It does not do anything by default, delegating control to the
# builtin VCL. The builtin VCL is called when there is no explicit
# return statement.
#
# See the VCL chapters in the Users Guide at https://www.varnish-cache.org/docs/
# and http://varnish-cache.org/trac/wiki/VCLExamples for more examples.

# Marker to tell the VCL compiler that this VCL has been adapted to the
# new 4.0 format.
vcl 4.0;

probe healthcheck {
    .url = "<%= node['varnish']['health_check_uri'] %>";
    .interval = 5 s;
    .timeout = <%= node['varnish']['health_check_timeout_seconds'] %> s;
    .window = 5;
    .threshold = 3;
}

<% node['varnish']['backend_hosts'].each_index do |index| %>
backend web<%= index %> {
  .host = "<%= node['varnish']['backend_hosts'][index] %>";
  .port = "<%= node['varnish']['backend_port'] %>";
  .probe = healthcheck;
}
<% end %>

import directors;
import std;

<% if node['w_varnish']['device_detect']['enabled'] %>
include "devicedetect.vcl";
<% end %>

<% if node['w_varnish']['geoip']['enabled'] %>
import maxminddb;
<% end %>

sub vcl_init {
    new webservers = directors.round_robin();
<% node['varnish']['backend_hosts'].each_index do |index| %>
    webservers.add_backend(web<%= index %>);
<% end %>

        return (ok);
}

acl purge {
	"localhost";
    <% node['w_varnish']['acl_purge'].each_index do |index| %>
        <%= node['w_varnish']['acl_purge'][index] %>;
    <% end %>
}

sub vcl_recv {

   #if (req.http.host != "europe.newsweek.com"){ return(pipe); }

<% if node['w_varnish']['geoip']['enabled'] %>
    maxminddb.init_db("/etc/varnish/GeoIP2-City.mmdb");
<% end %>

   if(req.url ~ "(rss|cron)")
   {
		return (pass);
   }

   if (req.http.Cookie ~ "nwcmsmode=1") {
		return (pass);
   }

    if (req.url == "/varnishhealthcheck"){
        return (synth(200, "Varnish server is healthy"));
    }

    set req.backend_hint =  webservers.backend();

    if (req.restarts == 0) {
        if (req.http.x-forwarded-for) {
            #set req.http.X-Forwarded-For =
            #    req.http.X-Forwarded-For + ", " + client.ip;
        } else {
            set req.http.X-Forwarded-For = client.ip;
        }
    }


    if (req.method == "PURGE" || req.method == "BAN") {
        if (!client.ip ~ purge) {
            return (synth(405, "Not allowed"));
        }
        ban("req.url ~ " + req.url);
        return (synth(200, "Purged"));
    }


    if (req.method != "GET" &&
      req.method != "HEAD" &&
      req.method != "PUT" &&
      req.method != "POST" &&
      req.method != "TRACE" &&
      req.method != "OPTIONS" &&
      req.method != "DELETE") {
        /* Non-RFC2616 or CONNECT which is weird. */
        return (pipe);
    }
    if (req.method != "GET" && req.method != "HEAD") {
        /* We only deal with GET and HEAD by default */
        return (pass);
    }
    if (req.http.Authorization) {
        /* Not cacheable by default */
        return (pass);
    }

### use this part to explicitly disable caching for specific uri
#
#    if (req.url ~ "(testurlpattern1.php|testurlpattern2.php)") {
#        /* No cache */
#        return (pass);
#    }

    return (hash);
}

sub vcl_pipe {
    # Note that only the first request to the backend will have
    # X-Forwarded-For set.  If you use X-Forwarded-For and want to
    # have it set for all requests, make sure to have:
    # set bereq.http.connection = "close";
    # here.  It is not set by default as it might break some broken web
    # applications, like IIS with NTLM authentication.
    return (pipe);
}

sub vcl_pass {
    return (fetch);
}

sub vcl_hash {

### by default varnish will create 1 cache object per url/host/ip
#
    hash_data(req.url);
    if (req.http.host) {
        hash_data(req.http.host);
    } else {
        hash_data(server.ip);
    }

### enable to generate different cache per location
#
    <% if node['w_varnish']['geoip']['enabled'] %>
    set req.http.X-GeoIP = maxminddb.query_country(std.ip(req.http.X-Forwarded-For, "0.0.0.0"));

 #   hash_data(req.http.X-GeoIP);
    if (req.http.X-GeoIP != "-") {
        set req.http.X-GeoIP-City = maxminddb.query_city(std.ip(req.http.X-Forwarded-For, "0.0.0.0"));
        if (req.http.X-GeoIP-City ~ "(London)") {
            set req.http.X-GeoIP-City = "London";
        } else {
            set req.http.X-GeoIP-City = "OTHER";
        }
	} else {
		set req.http.X-GeoIP = "OTHER";
		set req.http.X-GeoIP-City = "OTHER";
    }
 #   hash_data(req.http.X-GeoIP-City);
    <% end %>



    <% if node['w_varnish']['device_detect']['enabled'] %>
    call devicedetect;

	if (req.http.X-UA-Device == "pc") {
		set req.http.X-UA-Cat = "pc";
    } elseif (req.http.X-UA-Device ~ "tablet") {
        set req.http.X-UA-Device = "tablet";
		set req.http.X-UA-Cat = "pc";
    } elseif (req.http.X-UA-Device ~ "mobile") {
        set req.http.X-UA-Device = "mobile";
		set req.http.X-UA-Cat = "mobile";
    } else {
        set req.http.X-UA-Device = "other";
		set req.http.X-UA-Cat = "pc";
    }

	hash_data(req.http.X-UA-Cat);

    <% end %>

#
#    if (req.http.Cookie ~ "mobile_cookie=1") {
#        set req.http.X-Full-Browse = "true";
#    } else {
#        set req.http.X-Full-Browse = "false";
#    }
#    hash_data(req.http.X-Full-Browse);

###  use this config to
#
#    if (req.http.Cookie ~ "nl_popup=") {
#        set req.http.X-NL-Popup = "true";
#    } else {
#        set req.http.X-NL-Popup = "false";
#    }
#    hash_data(req.http.X-NL-Popup);

###  use this config for caching according to type of referer according to cookie name pattern
#
#    if (req.http.Referer) {
#        if (req.http.Cookie ~ "is_referer=other") {
#            set req.http.X-Is-Referer = "2";
#        } else if (req.http.Cookie ~ "is_referer=host") {
#            set req.http.X-Is-Referer = "3";
#        } else {
#            set req.http.X-Is-Referer = "1";
#        }
#    } else {
#        set req.http.X-Is-Referer = "4";
#    }
#    hash_data(req.http.X-Is-Referer);


    return (lookup);
}


sub vcl_hit {
    return (deliver);
}

sub vcl_miss {
    return (fetch);
}

sub vcl_backend_response {

    if (beresp.ttl <= 0s) {
                /*
                 * Mark as "Hit-For-Pass" for the next 2 minutes
                 */
                set beresp.uncacheable = true;
                set beresp.ttl = 20 s;
                return (deliver);
    }
    set beresp.ttl = 3h;
    set beresp.grace = 24h;
    return (deliver);
}

sub vcl_deliver {

#    set resp.http.X-Forwarded-For = req.http.X-Forwarded-For;
    set resp.http.X-UA-Device = req.http.X-UA-Device;
	set resp.http.X-UA-Cat = req.http.X-UA-Cat;
    set resp.http.X-GeoIP = req.http.X-GeoIP;
    set resp.http.X-GeoIP-City = req.http.X-GeoIP-City;
	set resp.http.Set-Cookie = "X-GeoIP=" + req.http.X-GeoIP + "; path=/";
#    set resp.http.X-Varnish-IP = "<%= node['varnish']['X-Varnish-IP'] %>";
set resp.http.X-Debug = req.http.X-Debug;
    return (deliver);
}

sub vcl_backend_error {
    synthetic ({"
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
  <body>
    <h3>Notification</h3>
    <hr>
    <p>This website is down for maintenance. We are sorry for the inconvenience and appreciate your patience.</p>
  </body>
</html>
"});
    return (deliver);
}

sub vcl_fini {
        return (ok);
}